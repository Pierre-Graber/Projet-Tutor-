



################################################################################



import[space]math,random,pickle,time



#[space]The[space]Euclidean[space]algorithm[space]for[space]gcd.

def[space]gcd(a,b):
[space][space]while[space]a!=0:
[space][space][space][space]a,b=b%a,a
[space][space]return(b)


#[space]Find[space]the[space]inverse[space]of[space]a[space]mod[space]n,[space]cf.[space]Wiki,[space]Extended[space]Euclidean[space]algorithm.

def[space]modinv(a,n):
[space][space]t,nt=0,1
[space][space]r,nr=n,a
[space][space]while[space]nr!=0:
[space][space][space][space]q=r//nr
[space][space][space][space]t,nt=nt,t-q*nt
[space][space][space][space]r,nr=nr,r-q*nr
[space][space]if[space]r>1:
[space][space][space][space]return[space]None
[space][space]while[space]t<0:
[space][space][space][space]t+=n
[space][space]return(t)


#[space]The[space]initial[space]constellation[space]of[space]the[space]table[space]of[space]small[space]primes.

ptab=[2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71]


#[space]ptab,[space]the[space]table[space]of[space]small[space]primes,[space]will[space]be[space]extended,[space]if[space]necessary,[space]to[space]have[space]its
#[space]last[space]element[space]not[space]less[space]than[space]trialdivbound.[space](Sieve[space]of[space]Eratosthenes[space]is[space]used.)

def[space]checkptab(trialdivbound):
[space][space]global[space]ptab
[space][space]g=ptab[-1]
[space][space]while[space]ptab[-1]<trialdivbound:
[space][space][space][space]g+=2
[space][space][space][space]h=math.ceil(math.sqrt(g))
[space][space][space][space]for[space]p[space]in[space]ptab:
[space][space][space][space][space][space]if[space]p>h:
[space][space][space][space][space][space][space][space]suc=1
[space][space][space][space][space][space][space][space]break
[space][space][space][space][space][space]if[space](g%p)==0:
[space][space][space][space][space][space][space][space]suc=0
[space][space][space][space][space][space][space][space]break
[space][space][space][space]if[space]suc==0:
[space][space][space][space][space][space]continue
[space][space][space][space]ptab+=[g]
[space][space]return


#[space]We[space]extend[space]ptab[space]by[space]default[space]to[space]a[space]size[space]appropriate[space]for[space]primality[space]test[space]with[space]trial
#[space]division[space]for[space]numbers[space]up[space]to[space]20[space]bits[space](this[space]is[space]required[space]in[space]the[space]first[space]part[space]of[space]the
#[space]function[space]provableprime()[space]further[space]below).

checkptab(2**10)


#[space]Apply[space]t[space]rounds[space]of[space]the[space]Miller-Rabin[space]test[space]to[space]n.
#
#[space]Return[space]value:[space]0:[space]n[space]is[space]composite.
#
#[space][space][space][space][space][space][space][space][space][space][space][space][space][space][space]1:[space]n[space]passes[space]t[space]rounds[space]of[space]the[space]strong[space]probable[space]prime[space]test.
#
#[space]Set[space]kn=1,[space]if[space]the[space]first[space]round[space]is[space]to[space]use[space]a=2,[space]else[space]set[space]kn=0.
#
#[space]See[space][1,[space]p.139].
#
#[space]We[space]use[space]this[space]test[space]only[space]to[space]improve[space]the[space]efficiency[space]of[space]Maurer's[space]algorithm,[space]see
#[space]comments[space]in[space]provableprime()[space]futher[space]below.

def[space]millerrabin(n,t,kn):
[space][space]assert[space]t[space]>=[space]1[space]and[space]0[space]<=[space]kn[space]<=[space]1
[space][space]if[space]n<=3:
[space][space][space][space]if[space]n>1:
[space][space][space][space][space][space]return(1)
[space][space][space][space]return(0)
[space][space]elif[space]n%2==0:
[space][space][space][space]return(0)
[space][space]RANDOM=random.SystemRandom()
[space][space]r=n1=n-1
[space][space]s=0
[space][space]while[space](r%2)>0:
[space][space][space][space]s+=1
[space][space][space][space]r//=2
[space][space]s1=s-1
[space][space]for[space]i[space]in[space]range(t):
[space][space][space][space]if[space]i==0[space]and[space]kn==1:
[space][space][space][space][space][space]a=2
[space][space][space][space]else:
[space][space][space][space][space][space]a=RANDOM.randint(2,n-2)[space][space][space][space]
[space][space][space][space]y=pow(a,r,n)
[space][space][space][space]if[space]y!=1[space]and[space]y!=n1:
[space][space][space][space][space][space]j=1
[space][space][space][space][space][space]while[space]j<=s1[space]and[space]y!=n1:
[space][space][space][space][space][space][space][space]y=(y*y)%n
[space][space][space][space][space][space][space][space]if[space]y==1:
[space][space][space][space][space][space][space][space][space][space]return(0)[space][space][space][space][space][space]
[space][space][space][space][space][space][space][space]j+=1
[space][space][space][space][space][space]if[space]y!=n1:
[space][space][space][space][space][space][space][space]return(0)
[space][space]return(1)


#[space]Generate[space]a[space]random[space]odd[space]number[space]n[space](2**k[space]>[space]n[space]>[space]2**(k-1),[space]k[space]>=[space]2)[space]with[space]proveable
#[space]primality[space]employing[space]Maurer's[space]algorithm[space](the[space](k-1)-th[space]bit[space]of[space]n[space]is[space]1).
#[space]Cf.[space]sec.4.62[space]of[space]HAC[space][1,[space]p.153].

def[space]provableprime(k):
[space][space]global[space]ptab
[space][space]RANDOM=random.SystemRandom()
#[space]The[space]default[space]size[space]of[space]ptab[space](see[space]above)[space]is[space]sufficiently[space]large[space]for[space]cases[space]k<=20.
[space][space]if[space]k<=20:
[space][space][space][space]while[space]True:
#[space]Select[space]a[space]random[space]odd[space]integer[space]in[space]the[space]interval[space][2**(k-1),[space]2**k-1][space](A.[space]J.[space]Menezes,
#[space]personal[space]communication).
[space][space][space][space][space][space]n=RANDOM.randint(2**(k-1),2**k-1)|1
[space][space][space][space][space][space]h=math.ceil(math.sqrt(n))
[space][space][space][space][space][space]for[space]p[space]in[space]ptab[1:]:
[space][space][space][space][space][space][space][space]if[space]p>h:
[space][space][space][space][space][space][space][space][space][space]return(n)[space]
[space][space][space][space][space][space][space][space]if[space](n%p)==0:
[space][space][space][space][space][space][space][space][space][space]break[space][space][space][space]
#[space]We[space]use[space]c=0.005[space]which[space]has[space]been[space]experimentally[space]found[space]to[space]be[space]optimal[space]in[space]processing
#[space]time[space]for[space]common[space]PC[space]under[space]MS[space]Windows[space]and[space]values[space]of[space]k[space]of[space]practical[space]interest.
#[space]A[space]different[space]c[space]value[space]may[space]be[space]desirable[space]for[space]use[space]in[space]different[space]computing
#[space]environments.[space][space][space][space][space][space][space][space]
[space][space]c=0.005
[space][space]bb=math.ceil(c*k*k)
[space][space]checkptab(bb)
[space][space]m=20
[space][space]if[space]k>2*m:
[space][space][space][space]while[space]True:
[space][space][space][space][space][space]s=RANDOM.uniform(0,1)
[space][space][space][space][space][space]r=2**(s-1)
[space][space][space][space][space][space]if[space](k-r*k)>m:
[space][space][space][space][space][space][space][space]break
[space][space]else:
[space][space][space][space]r=0.5
[space][space]q=provableprime(math.floor(r*k)+1)
[space][space]ii=2**(k-1)//(2*q)
[space][space]success=0
[space][space]while[space]success==0:
[space][space][space][space]rr=RANDOM.randint(ii+1,2*ii)[space][space][space][space]
[space][space][space][space]n=2*rr*q+1
[space][space][space][space]suc=1
[space][space][space][space]for[space]p[space]in[space]ptab:
[space][space][space][space][space][space]if[space]p>bb:
[space][space][space][space][space][space][space][space]break
[space][space][space][space][space][space]if[space](n%p)==0:
[space][space][space][space][space][space][space][space]suc=0
[space][space][space][space][space][space][space][space]break
[space][space][space][space]if[space]suc==0:
[space][space][space][space][space][space]continue
#[space]See[space][1,[space]p.153,[space]4.6.3[space](ii)],[space]Miller-Rabin[space]test[space]is[space]employed[space]here[space]for[space]purposes[space]of
#[space]improvement[space]of[space]efficiency[space]only.
[space][space][space][space]if[space]millerrabin(n,1,1)==1:
[space][space][space][space][space][space]a=RANDOM.randint(2,n-2)
[space][space][space][space][space][space]if[space]pow(a,n-1,n)==1:
[space][space][space][space][space][space][space][space]b=pow(a,2*rr,n)
[space][space][space][space][space][space][space][space]if[space]gcd(b-1,n)==1:
[space][space][space][space][space][space][space][space][space][space]success=1[space][space][space][space][space][space][space][space][space][space]
[space][space]return(n)



################################################################################



#[space]Installation[space]of[space]the[space]software.

#[space]Both[space]communication[space]partners[space]have[space]to[space]download[space]the[space]same[space]version[space]3x[space]of[space]Python
#[space]from[space]http://www.python.org.[space](Employing[space]the[space]same[space]version[space]of[space]Python[space]ensures
#[space]against[space]any[space]potentially[space]possible[space]incompatibilities[space]among[space]different[space]versions.)
#[space]The[space]present[space]code[space]can[space]be[space]stored[space]in[space]a[space]file[space]named[space]e.g.[space]provableprime.py[space]and[space]the
#[space]examples[space]given[space]further[space]below[space]run[space]in[space]Python's[space]GUI[space]IDLE.[space](File[space]-->[space]Open[space]to[space]find
#[space]and[space]open[space]the[space]file,[space]then[space]in[space]the[space]window[space]showing[space]the[space]code[space]Run[space]-->[space]Run[space]Module[space]to
#[space]run[space]it.[space]One[space]could[space]also[space]type[space]provableprime.py[space]in[space]a[space]DOS-window.)[space]Modifications
#[space]of[space]the[space]code[space]in[space]the[space]code[space]window,[space]e.g.[space]the[space]plaintext[space]string,[space]can[space]be[space]done[space]online
#[space]and[space]the[space]code[space]re-run.



################################################################################
################################################################################
###################[space]end[space]of[space]part[space]1[space](of[space]4)[space]of[space]PROVABLEPRIME2.1[space]###################

